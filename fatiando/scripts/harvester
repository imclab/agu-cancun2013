#!/usr/bin/env python
"""3D potential field inversion by planting anomalous densities.

A "heuristic" inversion for compact 3D geologic bodies. Performs the inversion
by iteratively growing the estimate around user-specified "seeds". Supports
various kinds of data (e.g., gravity, gravity tensor, total field magnetic).
Implements the method of Uieda and Barbosa (2012).

The input parameters are loaded from a file name 'Harvestfile.py' in the
current working directory. To generate a template for this file, run:

  harvester --template > Harvestfile.py

You can use option -f to specify a custom file name (though it must end in
.py) or a file in a different directory. The data files will be read and
output will be saved relative to where the input file is.
"""
import cPickle as pickle
import logging
import importlib
import os
import sys
import argparse

import numpy
from fatiando import gravmag as gm
from fatiando.mesher import PrismMesh
from fatiando import logger
from fatiando.vis import mpl, myv


exitmsg = "To get help, use: harvester --help"

sample_paramfile = \
"""# Template parameter file for program harvester

# This is a comment. It will be ignored

# The name of the file with the data
data_file = 'data.txt'
# The extension can be anything you like (.txt, .xyz, .bla)
# The file should have the data in xyz format. That is:
#   x1  y1  z1  height1  gz1  gxx1 ...
#   x2  y2  z2  height2  gz2  gxx2 ...
#   ...
#   xN  yN  zN  heightN  gzN  gxxN ...
# The coordinate system assumed is:
#    x -> North   y -> East   z -> Down
# Therefore, x is the Northing coordinate, y the Easting, and z the vertical
# coordinate. Optionally, height is the height of the topography (used to create
# a mesh that follows the topography). The order of the columns is not
# important.
# Remember: z is negative above the geoid but height is positive! gxx is the
#   North-North component, and so forth.
# Units: All coordinates and height are in meters! gz is in mGal and the tensor
#   components in Eotvos!

# Used to specify which columns of the data file should be used
use_cols = None
# If it is None, will use all columns. If you want to leave out a column use
# something like (0 is the first column):
#   use_cols = [0, 1, 2, 3, 5]
# This way you can invert only some components without having to edit the data
# file.

# This is the column format. You should only give the name of the columns that
# will be used (i.e., if you removed some with use_cols, don't include them)!
# Names specify the kind of data that each column contains.
# Possible names are: 'x', 'y', 'z', 'height', 'gz', 'gxx', 'gxy', 'gxz', 'gyy',
# 'gyz', 'gzz', 'mag'
# gz is the gravity anomaly, gxx etc are the gravity gradients (remember, x is
# North!), mag is the total field magnetic anomaly
column_fmt = ['x', 'y', 'z', 'gxx', 'gxz']

# Whether of not to invert the sign of z before running the inversion
inv_z = False
# Use inv_z = True if you want to turn it on. This is useful if your data set
# has z positive upward and you don't want to edit the data file.

# The boundaries of the mesh in meters:
#   [xmin, xmax, ymin, ymax]
mesh_bounds = [0, 1000, 0, 1000]
# Set mesh_bounds = None and harvester will set the bounds as the limits of the
# data.

# The z coordinates of the top and bottom of the mesh in meters.
mesh_top = 0
mesh_bottom = 1000
# If you provided the 'height' column in the data file, then you can set
# mesh_top = None and harvester will place the top of the mesh on the topography

# The number of prisms in the x, y, and z directions
mesh_shape = (10, 10, 10)

# The file with the seeds.
seed_file = 'seeds.txt'
# The seed file is in JSON format and should be like this:
#
# [
#   [x1, y1, z1, {"density":dens1}],
#   [x2, y2, z2, {"density":dens2, "magnetization":mag2}],
#   [x3, y3, z3, {"magnetization":mag3, "inclination":inc3,
#                 "declination":dec3}],
#   ...
# ]
#
# x, y, z are the coordinates of the seed and the dict (``{'density':2670}``)
# are its physical properties.
# WARNING: Must use ", not ', in the physical property names!#
# Each seed can have different kinds of physical properties. If inclination
# and declination are not given, will use the inc and dec of the inducing
# field (i.e., no remanent magnetization).
# Again, white space and newlines don't matter and the file extension can be
# anything.

# The value of the regularizing parameter. Must be >= 0.
regul = 1.0
# The regularizing parameter controls how strongly the compactness
# regularization is imposed. The higher this value, the more it is imposed.
# In practice, there is a limit to how much compactness you'll get.

# The threshold value for how small a change in the data-misfit is accepted
delta = 0.00001
# This controls how much the solution is allowed to grow. If it's too big, the
# seeds won't grow.

# Output files for the estimated physical property distribution and the mesh

# Name of the output file in Python's pickle format (so that it can be loaded
# from other scripts). Saves the fatiando.msh.ddd.PrismMesh instance with its
# physical properties set to the estimate.
pickle_file = 'result.pickle'
# Use pickle_file = None if you don't want to save in pickle format

# Name of the output files in the format accepted by the UBC-GIF software
# Meshtools <http://www.eos.ubc.ca/research/ubcgif>.
mesh_file = 'result.msh'
density_file = 'result.den'
# Use mesh_file = None or density_file = None if you don't want to save to UBC
# format

# Name of the file where the predicted data (modeled) will be saved.
pred_file = 'predicted.txt'
# The format will be the same as the input data file. Again, the file extension
# can be anything.
"""

parser = argparse.ArgumentParser(
    prog='harvester',
    description=__doc__,
    epilog=\
"""
References:

Uieda, L., and V. C. F. Barbosa (2012), Robust 3D gravity gradient inversion by
planting anomalous densities, Geophysics, 77(4), G55-G66,
doi:10.1190/geo2011-0388.1

Developed by Leonardo Uieda <leouieda@gmail.com>.

Part of Fatiando a Terra <http://fatiando.org>.
Submit bugs to <https://bitbucket.org/fatiando/fatiando/issues>.
""",
    formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('-f', metavar='INPUTFILE', type=str,
    help='Load input paramters from INPUTFILE')
parser.add_argument('--template', action='store_true',
    help='Print a template of the input file instead of calculating')
parser.add_argument('-v', '--verbose', action='store_true',
    help='Print information messages while calculating')
parser.add_argument('-l', metavar='LOGFILE', type=str,
    help='Log the information and debug messages to LOGFILE')
args = parser.parse_args()
if args.verbose:
    log = logger.get()
else:
    log = logger.get(level=logging.WARNING)
if args.l:
    logger.tofile(log, args.l)
if args.template:
    print sample_paramfile
    sys.exit()
inputfile = 'Harvestfile'
inputpath = os.path.abspath(os.path.curdir)
if args.f:
    if not os.path.isfile(args.f):
        log.error("Invalid/nonexistent input file %s" % (args.f))
        log.error(exitmsg)
        sys.exit()
    inputpath, inputfile = os.path.split(os.path.abspath(args.f))
    inputfile, ext = os.path.splitext(inputfile)
    if ext != '.py':
        log.error("Invalid input file %s" % (args.f))
        log.error("The input file must end in .py")
        log.error(exitmsg)
        sys.exit()
    if inputpath != os.path.abspath(os.path.curdir):
        os.chdir(inputpath)

log.info(logger.header())

# Get the parameters form the input file
try:
    # Remove all the other paths so that the only module that can be loaded is
    # in the current dir
    backup = sys.path
    sys.path = [inputpath]
    params = importlib.import_module(inputfile)
    sys.path = backup
except ImportError:
    log.error("Couldn't find input file %s.py" % (inputfile))
    log.error(exitmsg)
    sys.exit()
log.info("Reading parameters from file %s.py:" % (inputfile))
data_file = params.data_file
log.info("  data file: %s" % (data_file))
try:
    use_cols = params.use_cols
    log.info("    using columns: %s" % (str(use_cols)))
except AttributeError:
    use_cols = None
    log.info("    using columns: all")
column_fmt = params.column_fmt
log.info("    column format: %s" % (str(column_fmt)))
try:
    inv_z = params.inv_z
except AttributeError:
    inv_z = False
log.info("    inverting z axis of data: %s" % (str(inv_z)))
seed_file = params.seed_file
log.info("  seed file: %s" % (seed_file))
try:
    mesh_bounds = params.mesh_bounds
except AttributeError:
    mesh_bounds = None
if mesh_bounds is not None:
    log.info("  mesh x-y boundaries: %s" % (mesh_bounds))
else:
    log.info("  mesh x-y boundaries: data limits")
mesh_bottom = params.mesh_bottom
log.info("  mesh bottom: %g" % (mesh_bottom))
try:
    mesh_top = params.mesh_top
except AttributeError:
    mesh_top = None
if mesh_top is not None:
    log.info("  mesh top: %g" % (mesh_top))
else:
    log.info("  mesh top: topography")
mesh_shape = [i for i in reversed(params.mesh_shape)]
log.info("  mesh shape: %s" % (str(params.mesh_shape)))
regul = params.regul
log.info("  regularizing parameter: %g" % (regul))
delta = params.delta
log.info("  delta threshold: %g" % (delta))
try:
    pickle_file = params.pickle_file
    log.info("  output file (pickle format): %s" % (pickle_file))
except AttributeError:
    pickle_file = None
try:
    mesh_file = params.mesh_file
    log.info("  output files (UBC format):")
    log.info("    mesh file: %s" % (mesh_file))
except AttributeError:
    mesh_file = None
try:
    density_file = params.density_file
    log.info("    density file: %s" % (density_file))
except AttributeError:
    density_file = None
pred_file = params.pred_file
log.info("  predicted data output file: %s" % (pred_file))

if pickle_file is None and mesh_file is None and density_file is None:
    log.error("ERROR: Please specify at least one type of output file.")
    log.error("Accepted formats are: UBC GIF and Python's pickle.")
    log.error("See options pickle_file, mesh_file, and density_file " +
        "of the input file.")
    log.error(exitmsg)
    sys.exit()

if (mesh_file is None and density_file is not None or
    mesh_file is not None and density_file is None):
    log.error(
    "ERROR: Missing mesh file or density file for output in UBC GIF format.")
    log.error("Must give both or none.")
    log.error(exitmsg)
    sys.exit()

valid = ['x', 'y', 'z', 'height', 'gz', 'gxx', 'gxy', 'gxz', 'gyy', 'gyz',
         'gzz']
if 'x' not in column_fmt or 'y' not in column_fmt or 'z' not in column_fmt or \
    True not in (col in column_fmt for col in valid[4:]):
    log.error("ERROR: Invalid column format %s" % (column_fmt))
    log.error("Need at least 'x', 'y', 'z', and a data component.")
    log.error(exitmsg)
    sys.exit()

log.info("Loading data from file: %s" % (data_file))
try:
    rawdata = numpy.loadtxt(data_file, unpack=True, usecols=use_cols)
except IOError:
    log.error("ERROR: Couldn't find data file %s" % (data_file))
    log.error(exitmsg)
    sys.exit()
data = dict((n, None) for n in valid)
for col, val in zip(column_fmt, rawdata):
    if col not in valid:
        log.error("ERROR: Invalid column name % s" % (col))
        log.info("Valid names are: %s" % (str(valid)))
        log.error(exitmsg)
        sys.exit()
    data[col] = val

if mesh_top is None:
    if data['height'] is None:
        log.error("ERROR: If mesh_top = None you must provide a height " + \
            "in the data file.")
        log.error(exitmsg)
        sys.exit()
    mesh_top = -data['height'].max()
if mesh_bounds is None:
    x1, x2 = data['x'].min(), data['x'].max()
    y1, y2 = data['y'].min(), data['y'].max()
    mesh_bounds = [x1, x2, y1, y2]
mesh_bounds.extend([mesh_top, mesh_bottom])
mesh = PrismMesh(mesh_bounds, mesh_shape)
if data['height'] is not None:
    log.info("  using topography information")
    mesh.carvetopo(data['x'], data['y'], data['height'])

# Create the data modules
datamods = []
if data['gz'] is not None:
    datamods.append(
        gm.harvester.Gz(data['x'], data['y'], data['z'], data['gz']))
if data['gxx'] is not None:
    datamods.append(
        gm.harvester.Gxx(data['x'], data['y'], data['z'], data['gxx']))
if data['gxy'] is not None:
    datamods.append(
        gm.harvester.Gxy(data['x'], data['y'], data['z'], data['gxy']))
if data['gxz'] is not None:
    datamods.append(
        gm.harvester.Gxz(data['x'], data['y'], data['z'], data['gxz']))
if data['gyy'] is not None:
    datamods.append(
        gm.harvester.Gyy(data['x'], data['y'], data['z'], data['gyy']))
if data['gyz'] is not None:
    datamods.append(
        gm.harvester.Gyz(data['x'], data['y'], data['z'], data['gyz']))
if data['gzz'] is not None:
    datamods.append(
        gm.harvester.Gzz(data['x'], data['y'], data['z'], data['gzz']))

log.info("Loading seeds from file: %s" % (seed_file))
seeds = gm.harvester.sow(gm.harvester.loadseeds(seed_file), mesh)

# Try showing the seeds using mayavi, if it is installed
try:
    myv.figure()
    myv.prisms([mesh[s.i] for s in seeds])
    myv.axes(myv.outline(mesh.bounds), ranges=[i*0.001 for i in mesh.bounds], 
        fmt='%.1f')
    myv.wall_bottom(mesh.bounds)
    myv.wall_north(mesh.bounds)
    myv.show()
except ImportError:
    log.info("Couldn't show the seeds because Mayavi is not installed.")
    log.info("Moving on.")

estimate, predicted = gm.harvester.harvest(datamods, seeds, mesh, regul, delta)
mesh.addprop('density', estimate['density'])

if mesh_file is not None and density_file is not None:
    log.info("Saving estimate in UBC GIF format to %s and %s"
        % (mesh_file, density_file))
    mesh.dump(mesh_file, density_file, 'density')
if pickle_file is not None:
    log.info("Saving estimate in pickle format to %s" % (pickle_file))
    with open(pickle_file, 'w') as f:
        pickle.dump(mesh, f)

log.info("Saving predicted data to %s" % (pred_file))
with open(pred_file, 'w') as f:
    f.write(logger.header(comment='#'))
    f.write("# Predicted data:\n")
    f.write("#   coordinates are in meters\n")
    f.write("#   gz in mGal and tensor in Eotvos\n")
    pred_fmt = [col for col in valid if data[col] is not None]
    f.write("# %s \n" % (' '.join(pred_fmt)))
    output = [data['x'], data['y'], data['z']]
    if data['height'] is not None:
        output.append(data['height'])
    output.extend(predicted)
    numpy.savetxt(f, numpy.transpose(output))

log.info("Plotting the predicted data. Close figures when done.")
shape = (100, 100)
shift = 3
if data['height'] is not None:
    shift = 4
for i, pred in enumerate(predicted):
    col = pred_fmt[shift + i]
    mpl.figure()
    mpl.title(col + ": observed=color | predicted=contour")
    mpl.axis('scaled')
    levels = mpl.contourf(data['y']*0.001, data['x']*0.001, data[col], shape,
        12, interp=True)
    mpl.colorbar()
    mpl.contour(data['y']*0.001, data['x']*0.001, pred, shape, levels,
        color='k', interp=True)
    mpl.xlabel('East = y (km)')
    mpl.ylabel('North = x (km)')
    residuals = data[col] - pred
    mpl.figure()
    mpl.title(col + ': Residuals (mean=%g stddev=%g)' 
        % (residuals.mean(), residuals.std()))
    mpl.hist(residuals, bins=10)
    mpl.xlabel('Residuals')
    mpl.ylabel('Count')
mpl.show()

log.info("Done")
